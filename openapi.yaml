swagger: "2.0"
info:
  description: "Information about users, products and orders for Delilah Resto"
  version: "1.0.0"
  title: "Delilah Resto API"
  termsOfService: ""
  contact:
    email: "fabricioleonelpalavecino@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/api/v1"
tags:
- name: "Products"
  description: "Everything about your Products"
- name: "Orders"
  description: "Operations about orders"
- name: "Users"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /products:
    post:
      tags:
      - "products"
      summary: "Create a new product"
      description: ""
      operationId: "addProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Server error"
      security:
        - store_auth:
            - "write:products"
        
  /products/{id}:
    get:
      tags:
      - "products"
      summary: "Find product by ID"
      description: "Search one product by id"
      operationId: "findProductsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id values that need to be considered for filter"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        500:
          description: "Server error"
      security:
        - store_auth:
            - "write:products"
    put:
      tags:
      - "products"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of product that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Server error"
      security:
        - store_auth:
            - "write:products"
    delete:
      tags:
      - "products"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "Product id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          
        500:
          description: "Server error"
      security:
        - store_auth:
            - "write:products"
  /products/get-all:
    get:
      tags:
      - "products"
      summary: "Find all the products"
      description: "Returns all the products"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        500:
          description: "Server error"
  /orders:
    post:
      tags:
      - "orders"
      summary: "Create an order"
      description: ""
      operationId: "createOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Order object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        500:
          description: "Server error"
  /orders/get-all:
    get:
      tags:
      - "orders"
      summary: "Get all the orders"
      description: ""
      operationId: "getAllOrders"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        500:
          description: "Server error"        
      security:
        - store_auth:
            - "write:orders"    
  /orders/{id}:
    put:
      tags:
      - "orders"
      summary: "Update an order by ID"
      description: ""
      operationId: "updateOrderById"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of order that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        500:
          description: "Server error"
      security:
        - store_auth:
            - "write:orders"    
    delete:
      tags:
      - "orders"
      summary: "Delete an order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Server error"
      security:
        - store_auth:
            - "write:orders"    
  /users:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Server error"
  
  /users/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "credentials"
          in: "body"
          description: "The username and password for login"
          required: true
          schema:
            type: "object"
            properties:
              user_name:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get user by ID"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
        - store_auth:
            - "write:users"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      security:
        - store_auth:
            - "write:users"    
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
        - store_auth:
            - "write:users"
securityDefinitions:
  store_auth:
    type: "oauth2"
    authorizationUrl: "localhost/api/v1/users/login"
    flow: "implicit"
    scopes:
      write:products: "create, modify and delete products in the store"
      write:orders: "modify, delete and get all orders in the store"
      write:users: "list the registered users, get users by id,modify user and delete user"

definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Order Status"
      payment_method:
        type: "string"
        example: "cash, credit, etc"
      date_time:
        type: "string"
        format: "date-time"
      user_id:
        type: "integer"
        format: "int64"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_name:
        type: "string"
      full_name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      address:
        type: "string"
      phone:
        type: "string"
      is_Admin:
        type: "integer"
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      product_name:
        type: "string"
        example: "pizza"
      description:
        type: "string"
      price:
        type: "string"
      image:
        type: "string"
        description: "url from example's image"
 